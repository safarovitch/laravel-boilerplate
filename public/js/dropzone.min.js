/*
 * Dropzone wrapper
 * @version: 3.0.1 (Wed, 28 Jul 2021)
 * @requires: dropzone v5.5.0
 * @author: HtmlStream
 * @event-namespace: .HSCore.components.HSDropzone
 * @license: Htmlstream Libraries (https://htmlstream.com/licenses)
 * Copyright 2021 Htmlstream
 */
// HSCore.components.HSDropzone = {
//     collection: [],
//     dataAttributeName: "data-hs-dropzone-options",
//     defaults: {
//         url: "https://httpbin.org/anything",
//         thumbnailWidth: 300,
//         thumbnailHeight: 300,
//         previewTemplate: '<div class="col h-100 mb-4">    <div class="dz-preview dz-file-preview">      <div class="d-flex justify-content-end dz-close-icon">        <small class="bi-x" data-dz-remove></small>      </div>      <div class="dz-details d-flex">        <div class="dz-img flex-shrink-0">         <img class="img-fluid dz-img-inner" data-dz-thumbnail>        </div>        <div class="dz-file-wrapper flex-grow-1">         <h6 class="dz-filename">          <span class="dz-title" data-dz-name></span>         </h6>         <div class="dz-size" data-dz-size></div>        </div>      </div>      <div class="dz-progress progress">        <div class="dz-upload progress-bar bg-success" role="progressbar" style="width: 0" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" data-dz-uploadprogress></div>      </div>      <div class="d-flex align-items-center">        <div class="dz-success-mark">          <span class="bi-check-lg"></span>        </div>        <div class="dz-error-mark">          <span class="bi-x-lg"></span>        </div>        <div class="dz-error-message">          <small data-dz-errormessage></small>        </div>      </div>    </div></div>'
//     },
//     init(t, e, i) {
//         const o = this;
//         let n;
//         n = t instanceof HTMLElement ? [t] : t instanceof Object ? t : document.querySelectorAll(t);
//         for (let t = 0; t < n.length; t += 1) o.addToCollection(n[t], e, i || n[t].id);
//         if (!o.collection.length) return !1;
//         o._init()
//     },
//     addToCollection(t, e, i) { this.collection.push({ $el: t, id: i || null, options: Object.assign({}, this.defaults, t.hasAttribute(this.dataAttributeName) ? JSON.parse(t.getAttribute(this.dataAttributeName)) : {}, e) }) },
//     getItems() { const t = this; let e = []; for (let i = 0; i < t.collection.length; i += 1) e.push(t.collection[i].$initializedEl); return e },
//     getItem(t) { return "number" == typeof t ? this.collection[t].$initializedEl : this.collection.find(e => e.id === t).$initializedEl },
//     _init() {
//         const t = this;
//         for (let e = 0; e < t.collection.length; e += 1) {
//             let i, o;
//             t.collection[e].hasOwnProperty("$initializedEl") || (i = t.collection[e].options, o = t.collection[e].$el, t.collection[e].$initializedEl = new Dropzone(o, i))
//         }
//     }
// }

// HSCore.components.HSDropzone = {
//     collection: [],
//     dataAttributeName: "data-hs-dropzone-options",
//     defaults: {
//         url: "./",
//         thumbnailWidth: 300,
//         thumbnailHeight: 300,
//         previewTemplate: '<div class="col h-100 mb-4">    <div class="dz-preview dz-file-preview">      <div class="d-flex justify-content-end dz-close-icon">        <small class="bi-x" data-dz-remove></small>      </div>      <div class="dz-details d-flex">        <div class="dz-img flex-shrink-0">         <img class="img-fluid dz-img-inner" data-dz-thumbnail>        </div>        <div class="dz-file-wrapper flex-grow-1">         <h6 class="dz-filename">          <span class="dz-title" data-dz-name></span>         </h6>         <div class="dz-size" data-dz-size></div>        </div>      </div>      <div class="dz-progress progress">        <div class="dz-upload progress-bar bg-success" role="progressbar" style="width: 0" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" data-dz-uploadprogress></div>      </div>      <div class="d-flex align-items-center">        <div class="dz-success-mark">          <span class="bi-check-lg"></span>        </div>        <div class="dz-error-mark">          <span class="bi-x-lg"></span>        </div>        <div class="dz-error-message">          <small data-dz-errormessage></small>        </div>      </div>    </div></div>'
//     },
//     init(t, e, i) {
//         var submitButton = document.querySelector("button[type='submit']");
//         var wrapperThis = this;

//         submitButton.addEventListener("click", function() {
//             wrapperThis.processQueue();
//         });

//         const o = this;

//         o.on("addedfile", function(file) {
//             alert();
//         });

//         let n;
//         n = t instanceof HTMLElement ? [t] : t instanceof Object ? t : document.querySelectorAll(t);
//         for (let t = 0; t < n.length; t += 1) o.addToCollection(n[t], e, i || n[t].id);
//         if (!o.collection.length) return !1;
//         o._init()

//     },
//     addToCollection(t, e, i) { this.collection.push({ $el: t, id: i || null, options: Object.assign({}, this.defaults, t.hasAttribute(this.dataAttributeName) ? JSON.parse(t.getAttribute(this.dataAttributeName)) : {}, e) }) },
//     getItems() { const t = this; let e = []; for (let i = 0; i < t.collection.length; i += 1) e.push(t.collection[i].$initializedEl); return e },
//     getItem(t) { return "number" == typeof t ? this.collection[t].$initializedEl : this.collection.find(e => e.id === t).$initializedEl },
//     _init() {
//         const t = this;
//         for (let e = 0; e < t.collection.length; e += 1) {
//             let i, o;
//             t.collection[e].hasOwnProperty("$initializedEl") || (i = t.collection[e].options, o = t.collection[e].$el, t.collection[e].$initializedEl = new Dropzone(o, i))
//         }
//     }
// }


// HSCore.components.HSDropzone = {
//     url: "/Account/Create",
//     autoProcessQueue: false,
//     uploadMultiple: true,
//     parallelUploads: 100,
//     maxFiles: 100,
//     acceptedFiles: "image/*",

//     init: function() {

//         var submitButton = document.querySelector("#submit-all");
//         var wrapperThis = this;

//         submitButton.addEventListener("click", function() {
//             wrapperThis.processQueue();
//         });

//         this.on("addedfile", function(file) {

//             // Create the remove button
//             var removeButton = Dropzone.createElement("<button class='btn btn-lg dark'>Remove File</button>");

//             // Listen to the click event
//             removeButton.addEventListener("click", function(e) {
//                 // Make sure the button click doesn't submit the form:
//                 e.preventDefault();
//                 e.stopPropagation();

//                 // Remove the file preview.
//                 wrapperThis.removeFile(file);
//                 // If you want to the delete the file on the server as well,
//                 // you can do the AJAX request here.
//             });

//             // Add the button to the file preview element.
//             file.previewElement.appendChild(removeButton);
//         });

//         this.on('sendingmultiple', function(data, xhr, formData) {
//             formData.append("Username", $("#Username").val());
//         });
//     }
// };